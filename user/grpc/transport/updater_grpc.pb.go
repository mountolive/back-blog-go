// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserUpdaterClient is the client API for UserUpdater service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserUpdaterClient interface {
	Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type userUpdaterClient struct {
	cc grpc.ClientConnInterface
}

func NewUserUpdaterClient(cc grpc.ClientConnInterface) UserUpdaterClient {
	return &userUpdaterClient{cc}
}

func (c *userUpdaterClient) Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/user.UserUpdater/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserUpdaterServer is the server API for UserUpdater service.
// All implementations must embed UnimplementedUserUpdaterServer
// for forward compatibility
type UserUpdaterServer interface {
	Update(context.Context, *UpdateUserRequest) (*UserResponse, error)
	mustEmbedUnimplementedUserUpdaterServer()
}

// UnimplementedUserUpdaterServer must be embedded to have forward compatible implementations.
type UnimplementedUserUpdaterServer struct {
}

func (UnimplementedUserUpdaterServer) Update(context.Context, *UpdateUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserUpdaterServer) mustEmbedUnimplementedUserUpdaterServer() {}

// UnsafeUserUpdaterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserUpdaterServer will
// result in compilation errors.
type UnsafeUserUpdaterServer interface {
	mustEmbedUnimplementedUserUpdaterServer()
}

func RegisterUserUpdaterServer(s grpc.ServiceRegistrar, srv UserUpdaterServer) {
	s.RegisterService(&UserUpdater_ServiceDesc, srv)
}

func _UserUpdater_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdaterServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserUpdater/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdaterServer).Update(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserUpdater_ServiceDesc is the grpc.ServiceDesc for UserUpdater service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserUpdater_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserUpdater",
	HandlerType: (*UserUpdaterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _UserUpdater_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "updater.proto",
}
