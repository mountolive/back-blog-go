// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transport

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserCheckerClient is the client API for UserChecker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCheckerClient interface {
	CheckUser(ctx context.Context, in *CheckUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type userCheckerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCheckerClient(cc grpc.ClientConnInterface) UserCheckerClient {
	return &userCheckerClient{cc}
}

func (c *userCheckerClient) CheckUser(ctx context.Context, in *CheckUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/user.UserChecker/CheckUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCheckerServer is the server API for UserChecker service.
// All implementations must embed UnimplementedUserCheckerServer
// for forward compatibility
type UserCheckerServer interface {
	CheckUser(context.Context, *CheckUserRequest) (*UserResponse, error)
	mustEmbedUnimplementedUserCheckerServer()
}

// UnimplementedUserCheckerServer must be embedded to have forward compatible implementations.
type UnimplementedUserCheckerServer struct{}

func (UnimplementedUserCheckerServer) CheckUser(context.Context, *CheckUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUser not implemented")
}
func (UnimplementedUserCheckerServer) mustEmbedUnimplementedUserCheckerServer() {}

// UnsafeUserCheckerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCheckerServer will
// result in compilation errors.
type UnsafeUserCheckerServer interface {
	mustEmbedUnimplementedUserCheckerServer()
}

func RegisterUserCheckerServer(s grpc.ServiceRegistrar, srv UserCheckerServer) {
	s.RegisterService(&UserChecker_ServiceDesc, srv)
}

func _UserChecker_CheckUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCheckerServer).CheckUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserChecker/CheckUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCheckerServer).CheckUser(ctx, req.(*CheckUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserChecker_ServiceDesc is the grpc.ServiceDesc for UserChecker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserChecker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserChecker",
	HandlerType: (*UserCheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUser",
			Handler:    _UserChecker_CheckUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checker.proto",
}
