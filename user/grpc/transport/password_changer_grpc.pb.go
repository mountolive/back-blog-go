// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PasswordChangerClient is the client API for PasswordChanger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PasswordChangerClient interface {
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
}

type passwordChangerClient struct {
	cc grpc.ClientConnInterface
}

func NewPasswordChangerClient(cc grpc.ClientConnInterface) PasswordChangerClient {
	return &passwordChangerClient{cc}
}

func (c *passwordChangerClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, "/user.PasswordChanger/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordChangerServer is the server API for PasswordChanger service.
// All implementations must embed UnimplementedPasswordChangerServer
// for forward compatibility
type PasswordChangerServer interface {
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	mustEmbedUnimplementedPasswordChangerServer()
}

// UnimplementedPasswordChangerServer must be embedded to have forward compatible implementations.
type UnimplementedPasswordChangerServer struct {
}

func (UnimplementedPasswordChangerServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedPasswordChangerServer) mustEmbedUnimplementedPasswordChangerServer() {}

// UnsafePasswordChangerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasswordChangerServer will
// result in compilation errors.
type UnsafePasswordChangerServer interface {
	mustEmbedUnimplementedPasswordChangerServer()
}

func RegisterPasswordChangerServer(s grpc.ServiceRegistrar, srv PasswordChangerServer) {
	s.RegisterService(&PasswordChanger_ServiceDesc, srv)
}

func _PasswordChanger_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordChangerServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.PasswordChanger/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordChangerServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PasswordChanger_ServiceDesc is the grpc.ServiceDesc for PasswordChanger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PasswordChanger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.PasswordChanger",
	HandlerType: (*PasswordChangerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangePassword",
			Handler:    _PasswordChanger_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "password_changer.proto",
}
