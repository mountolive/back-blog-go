// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package httpx_test

import (
	"context"
	"sync"

	"github.com/mountolive/back-blog-go/post/usecase"
)

// Ensure, that RepositoryMock does implement usecase.Repository.
// If this is not the case, regenerate this file with moq.
var _ usecase.Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of usecase.Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked usecase.Repository
// 		mockedRepository := &RepositoryMock{
// 			CreatePostFunc: func(contextMoqParam context.Context, createPostDto *usecase.CreatePostDto) (*usecase.Post, error) {
// 				panic("mock out the CreatePost method")
// 			},
// 			FilterByDateRangeFunc: func(ctx context.Context, filter *usecase.ByDateRangeDto, page int, pageSize int) ([]*usecase.Post, error) {
// 				panic("mock out the FilterByDateRange method")
// 			},
// 			FilterByTagFunc: func(ctx context.Context, filter *usecase.ByTagDto, page int, pageSize int) ([]*usecase.Post, error) {
// 				panic("mock out the FilterByTag method")
// 			},
// 			GetPostFunc: func(contextMoqParam context.Context, s string) (*usecase.Post, error) {
// 				panic("mock out the GetPost method")
// 			},
// 			UpdatePostFunc: func(contextMoqParam context.Context, updatePostDto *usecase.UpdatePostDto) (*usecase.Post, error) {
// 				panic("mock out the UpdatePost method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires usecase.Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// CreatePostFunc mocks the CreatePost method.
	CreatePostFunc func(contextMoqParam context.Context, createPostDto *usecase.CreatePostDto) (*usecase.Post, error)

	// FilterByDateRangeFunc mocks the FilterByDateRange method.
	FilterByDateRangeFunc func(ctx context.Context, filter *usecase.ByDateRangeDto, page int, pageSize int) ([]*usecase.Post, error)

	// FilterByTagFunc mocks the FilterByTag method.
	FilterByTagFunc func(ctx context.Context, filter *usecase.ByTagDto, page int, pageSize int) ([]*usecase.Post, error)

	// GetPostFunc mocks the GetPost method.
	GetPostFunc func(contextMoqParam context.Context, s string) (*usecase.Post, error)

	// UpdatePostFunc mocks the UpdatePost method.
	UpdatePostFunc func(contextMoqParam context.Context, updatePostDto *usecase.UpdatePostDto) (*usecase.Post, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreatePost holds details about calls to the CreatePost method.
		CreatePost []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreatePostDto is the createPostDto argument value.
			CreatePostDto *usecase.CreatePostDto
		}
		// FilterByDateRange holds details about calls to the FilterByDateRange method.
		FilterByDateRange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter *usecase.ByDateRangeDto
			// Page is the page argument value.
			Page int
			// PageSize is the pageSize argument value.
			PageSize int
		}
		// FilterByTag holds details about calls to the FilterByTag method.
		FilterByTag []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter *usecase.ByTagDto
			// Page is the page argument value.
			Page int
			// PageSize is the pageSize argument value.
			PageSize int
		}
		// GetPost holds details about calls to the GetPost method.
		GetPost []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// UpdatePost holds details about calls to the UpdatePost method.
		UpdatePost []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdatePostDto is the updatePostDto argument value.
			UpdatePostDto *usecase.UpdatePostDto
		}
	}
	lockCreatePost        sync.RWMutex
	lockFilterByDateRange sync.RWMutex
	lockFilterByTag       sync.RWMutex
	lockGetPost           sync.RWMutex
	lockUpdatePost        sync.RWMutex
}

// CreatePost calls CreatePostFunc.
func (mock *RepositoryMock) CreatePost(contextMoqParam context.Context, createPostDto *usecase.CreatePostDto) (*usecase.Post, error) {
	if mock.CreatePostFunc == nil {
		panic("RepositoryMock.CreatePostFunc: method is nil but Repository.CreatePost was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CreatePostDto   *usecase.CreatePostDto
	}{
		ContextMoqParam: contextMoqParam,
		CreatePostDto:   createPostDto,
	}
	mock.lockCreatePost.Lock()
	mock.calls.CreatePost = append(mock.calls.CreatePost, callInfo)
	mock.lockCreatePost.Unlock()
	return mock.CreatePostFunc(contextMoqParam, createPostDto)
}

// CreatePostCalls gets all the calls that were made to CreatePost.
// Check the length with:
//     len(mockedRepository.CreatePostCalls())
func (mock *RepositoryMock) CreatePostCalls() []struct {
	ContextMoqParam context.Context
	CreatePostDto   *usecase.CreatePostDto
} {
	var calls []struct {
		ContextMoqParam context.Context
		CreatePostDto   *usecase.CreatePostDto
	}
	mock.lockCreatePost.RLock()
	calls = mock.calls.CreatePost
	mock.lockCreatePost.RUnlock()
	return calls
}

// FilterByDateRange calls FilterByDateRangeFunc.
func (mock *RepositoryMock) FilterByDateRange(ctx context.Context, filter *usecase.ByDateRangeDto, page int, pageSize int) ([]*usecase.Post, error) {
	if mock.FilterByDateRangeFunc == nil {
		panic("RepositoryMock.FilterByDateRangeFunc: method is nil but Repository.FilterByDateRange was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Filter   *usecase.ByDateRangeDto
		Page     int
		PageSize int
	}{
		Ctx:      ctx,
		Filter:   filter,
		Page:     page,
		PageSize: pageSize,
	}
	mock.lockFilterByDateRange.Lock()
	mock.calls.FilterByDateRange = append(mock.calls.FilterByDateRange, callInfo)
	mock.lockFilterByDateRange.Unlock()
	return mock.FilterByDateRangeFunc(ctx, filter, page, pageSize)
}

// FilterByDateRangeCalls gets all the calls that were made to FilterByDateRange.
// Check the length with:
//     len(mockedRepository.FilterByDateRangeCalls())
func (mock *RepositoryMock) FilterByDateRangeCalls() []struct {
	Ctx      context.Context
	Filter   *usecase.ByDateRangeDto
	Page     int
	PageSize int
} {
	var calls []struct {
		Ctx      context.Context
		Filter   *usecase.ByDateRangeDto
		Page     int
		PageSize int
	}
	mock.lockFilterByDateRange.RLock()
	calls = mock.calls.FilterByDateRange
	mock.lockFilterByDateRange.RUnlock()
	return calls
}

// FilterByTag calls FilterByTagFunc.
func (mock *RepositoryMock) FilterByTag(ctx context.Context, filter *usecase.ByTagDto, page int, pageSize int) ([]*usecase.Post, error) {
	if mock.FilterByTagFunc == nil {
		panic("RepositoryMock.FilterByTagFunc: method is nil but Repository.FilterByTag was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Filter   *usecase.ByTagDto
		Page     int
		PageSize int
	}{
		Ctx:      ctx,
		Filter:   filter,
		Page:     page,
		PageSize: pageSize,
	}
	mock.lockFilterByTag.Lock()
	mock.calls.FilterByTag = append(mock.calls.FilterByTag, callInfo)
	mock.lockFilterByTag.Unlock()
	return mock.FilterByTagFunc(ctx, filter, page, pageSize)
}

// FilterByTagCalls gets all the calls that were made to FilterByTag.
// Check the length with:
//     len(mockedRepository.FilterByTagCalls())
func (mock *RepositoryMock) FilterByTagCalls() []struct {
	Ctx      context.Context
	Filter   *usecase.ByTagDto
	Page     int
	PageSize int
} {
	var calls []struct {
		Ctx      context.Context
		Filter   *usecase.ByTagDto
		Page     int
		PageSize int
	}
	mock.lockFilterByTag.RLock()
	calls = mock.calls.FilterByTag
	mock.lockFilterByTag.RUnlock()
	return calls
}

// GetPost calls GetPostFunc.
func (mock *RepositoryMock) GetPost(contextMoqParam context.Context, s string) (*usecase.Post, error) {
	if mock.GetPostFunc == nil {
		panic("RepositoryMock.GetPostFunc: method is nil but Repository.GetPost was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockGetPost.Lock()
	mock.calls.GetPost = append(mock.calls.GetPost, callInfo)
	mock.lockGetPost.Unlock()
	return mock.GetPostFunc(contextMoqParam, s)
}

// GetPostCalls gets all the calls that were made to GetPost.
// Check the length with:
//     len(mockedRepository.GetPostCalls())
func (mock *RepositoryMock) GetPostCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockGetPost.RLock()
	calls = mock.calls.GetPost
	mock.lockGetPost.RUnlock()
	return calls
}

// UpdatePost calls UpdatePostFunc.
func (mock *RepositoryMock) UpdatePost(contextMoqParam context.Context, updatePostDto *usecase.UpdatePostDto) (*usecase.Post, error) {
	if mock.UpdatePostFunc == nil {
		panic("RepositoryMock.UpdatePostFunc: method is nil but Repository.UpdatePost was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		UpdatePostDto   *usecase.UpdatePostDto
	}{
		ContextMoqParam: contextMoqParam,
		UpdatePostDto:   updatePostDto,
	}
	mock.lockUpdatePost.Lock()
	mock.calls.UpdatePost = append(mock.calls.UpdatePost, callInfo)
	mock.lockUpdatePost.Unlock()
	return mock.UpdatePostFunc(contextMoqParam, updatePostDto)
}

// UpdatePostCalls gets all the calls that were made to UpdatePost.
// Check the length with:
//     len(mockedRepository.UpdatePostCalls())
func (mock *RepositoryMock) UpdatePostCalls() []struct {
	ContextMoqParam context.Context
	UpdatePostDto   *usecase.UpdatePostDto
} {
	var calls []struct {
		ContextMoqParam context.Context
		UpdatePostDto   *usecase.UpdatePostDto
	}
	mock.lockUpdatePost.RLock()
	calls = mock.calls.UpdatePost
	mock.lockUpdatePost.RUnlock()
	return calls
}
