// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transport/user.proto

package transport

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Empty response for CheckUser
type CheckUserResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckUserResponse) Reset()         { *m = CheckUserResponse{} }
func (m *CheckUserResponse) String() string { return proto.CompactTextString(m) }
func (*CheckUserResponse) ProtoMessage()    {}
func (*CheckUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fa1ee495e6d9f92, []int{0}
}

func (m *CheckUserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckUserResponse.Unmarshal(m, b)
}
func (m *CheckUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckUserResponse.Marshal(b, m, deterministic)
}
func (m *CheckUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckUserResponse.Merge(m, src)
}
func (m *CheckUserResponse) XXX_Size() int {
	return xxx_messageInfo_CheckUserResponse.Size(m)
}
func (m *CheckUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckUserResponse proto.InternalMessageInfo

type CheckUserRequest struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckUserRequest) Reset()         { *m = CheckUserRequest{} }
func (m *CheckUserRequest) String() string { return proto.CompactTextString(m) }
func (*CheckUserRequest) ProtoMessage()    {}
func (*CheckUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fa1ee495e6d9f92, []int{1}
}

func (m *CheckUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckUserRequest.Unmarshal(m, b)
}
func (m *CheckUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckUserRequest.Marshal(b, m, deterministic)
}
func (m *CheckUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckUserRequest.Merge(m, src)
}
func (m *CheckUserRequest) XXX_Size() int {
	return xxx_messageInfo_CheckUserRequest.Size(m)
}
func (m *CheckUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckUserRequest proto.InternalMessageInfo

func (m *CheckUserRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func init() {
	proto.RegisterType((*CheckUserResponse)(nil), "transport.CheckUserResponse")
	proto.RegisterType((*CheckUserRequest)(nil), "transport.CheckUserRequest")
}

func init() {
	proto.RegisterFile("transport/user.proto", fileDescriptor_6fa1ee495e6d9f92)
}

var fileDescriptor_6fa1ee495e6d9f92 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x29, 0x4a, 0xcc,
	0x2b, 0x2e, 0xc8, 0x2f, 0x2a, 0xd1, 0x2f, 0x2d, 0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x84, 0x8b, 0x2a, 0x09, 0x73, 0x09, 0x3a, 0x67, 0xa4, 0x26, 0x67, 0x87, 0x16, 0xa7,
	0x16, 0x05, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x2a, 0x69, 0x70, 0x09, 0x20, 0x09, 0x16,
	0x96, 0xa6, 0x16, 0x97, 0x08, 0x89, 0x70, 0xb1, 0xe6, 0xe4, 0xa7, 0x67, 0xe6, 0x49, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x06, 0x41, 0x38, 0x46, 0x01, 0x5c, 0x2c, 0x20, 0x45, 0x42, 0x1e, 0x5c, 0x9c,
	0x70, 0x1d, 0x42, 0xd2, 0x7a, 0x70, 0xf3, 0xf5, 0xd0, 0xcd, 0x91, 0x92, 0xc1, 0x2e, 0x09, 0xb5,
	0x99, 0xc1, 0x89, 0x37, 0x8a, 0x5b, 0x4f, 0x1f, 0xae, 0x24, 0x89, 0x0d, 0xec, 0x62, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x2c, 0xde, 0x08, 0xc9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	CheckUser(ctx context.Context, in *CheckUserRequest, opts ...grpc.CallOption) (*CheckUserResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) CheckUser(ctx context.Context, in *CheckUserRequest, opts ...grpc.CallOption) (*CheckUserResponse, error) {
	out := new(CheckUserResponse)
	err := c.cc.Invoke(ctx, "/transport.User/CheckUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	CheckUser(context.Context, *CheckUserRequest) (*CheckUserResponse, error)
}

// UnimplementedUserServer can be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (*UnimplementedUserServer) CheckUser(ctx context.Context, req *CheckUserRequest) (*CheckUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUser not implemented")
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_CheckUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport.User/CheckUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckUser(ctx, req.(*CheckUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transport.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUser",
			Handler:    _User_CheckUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/user.proto",
}
