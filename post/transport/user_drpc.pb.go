// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.21
// source: transport/user.proto

package transport

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_transport_user_proto struct{}

func (drpcEncoding_File_transport_user_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_transport_user_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_transport_user_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_transport_user_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCUserClient interface {
	DRPCConn() drpc.Conn

	CheckUser(ctx context.Context, in *CheckUserRequest) (*CheckUserResponse, error)
}

type drpcUserClient struct {
	cc drpc.Conn
}

func NewDRPCUserClient(cc drpc.Conn) DRPCUserClient {
	return &drpcUserClient{cc}
}

func (c *drpcUserClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcUserClient) CheckUser(ctx context.Context, in *CheckUserRequest) (*CheckUserResponse, error) {
	out := new(CheckUserResponse)
	err := c.cc.Invoke(ctx, "/transport.User/CheckUser", drpcEncoding_File_transport_user_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCUserServer interface {
	CheckUser(context.Context, *CheckUserRequest) (*CheckUserResponse, error)
}

type DRPCUserUnimplementedServer struct{}

func (s *DRPCUserUnimplementedServer) CheckUser(context.Context, *CheckUserRequest) (*CheckUserResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

type DRPCUserDescription struct{}

func (DRPCUserDescription) NumMethods() int { return 1 }

func (DRPCUserDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/transport.User/CheckUser", drpcEncoding_File_transport_user_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCUserServer).
					CheckUser(
						ctx,
						in1.(*CheckUserRequest),
					)
			}, DRPCUserServer.CheckUser, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterUser(mux drpc.Mux, impl DRPCUserServer) error {
	return mux.Register(impl, DRPCUserDescription{})
}

type DRPCUser_CheckUserStream interface {
	drpc.Stream
	SendAndClose(*CheckUserResponse) error
}

type drpcUser_CheckUserStream struct {
	drpc.Stream
}

func (x *drpcUser_CheckUserStream) SendAndClose(m *CheckUserResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_transport_user_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
