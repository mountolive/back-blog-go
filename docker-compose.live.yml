version: "2.2"

services:
  nats:
    image: nats:2.5
    expose:
      - "4222"
    networks:
      - internal

  postgresql_user:
    image: postgres:13
    environment:
      POSTGRES_USER: ${USERS_DB_USER}
      POSTGRES_PASSWORD: ${USERS_DB_PASS}
      POSTGRES_DB: ${USERS_DB_NAME}
    expose:
      - "${USERS_DB_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${USERS_DB_USER} -d ${USERS_DB_NAME} -p ${USERS_DB_PORT}" ]
      interval: 10s
      timeout: 5s
      retries: 3
    command: [ "postgres", "-c", "log_statement=all", "-p", "${USERS_DB_PORT}" ]
    networks:
      - internal
    volumes:
      - pgdata_users:/var/lib/postgresql/data

  postgresql_post:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTS_DB_USER}
      POSTGRES_PASSWORD: ${POSTS_DB_PASS}
      POSTGRES_DB: ${POSTS_DB_NAME}
    expose:
      - "${POSTS_DB_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTS_DB_USER} -d ${POSTS_DB_NAME} -p ${POSTS_DB_PORT}" ]
      interval: 10s
      timeout: 5s
      retries: 3
    command: [ "postgres", "-c", "log_statement=all", "-p", "${POSTS_DB_PORT}" ]
    networks:
      - internal
    volumes:
      - pgdata_posts:/var/lib/postgresql/data

  nginx:
    restart: unless-stopped
    image: nginx:latest
    networks:
      - nginx_network
      - internal
    depends_on:
      gateway:
        condition: service_started
      front:
        condition: service_started
    ports:
      - 80:80/tcp
      - 443:443/tcp
    volumes:
      - ./nginx:/etc/nginx:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot:latest
    networks:
      - nginx_network
    depends_on:
      dummy-nginx:
        condition: service_started
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/logs:/var/log/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  front:
    build:
      context: ./front
      dockerfile: Dockerfile
    depends_on:
      gateway:
        condition: service_started
    environment:
      - "${TRANSPORT:-http}"
      - "${GATEWAY_HOST:-gateway}"
      - "${GATEWAY_PORT:-8003}"
    ports:
      - "8080:8080"
    command: "make dev"
    networks:
       - nginx_network
       - internal

  users:
    build:
      context: ./user
      dockerfile: Dockerfile
    depends_on:
      postgresql_user:
        condition: service_healthy
    environment:
      - USERS_DB_USER
      - USERS_DB_PASS
      - USERS_DB_NAME
      - USERS_DB_HOST
      - USERS_DB_PORT
      - USERS_PORT
      - USERS_ADMIN_EMAIL
      - USERS_ADMIN_USERNAME
      - USERS_ADMIN_PASSWORD
      - USERS_ADMIN_FIRST_NAME
      - USERS_ADMIN_LAST_NAME
    expose:
      - "${USERS_PORT}"
    networks:
      - internal

  posts:
    build:
      context: ./post
      dockerfile: Dockerfile
    depends_on:
      postgresql_post:
        condition: service_healthy
      users:
        condition: service_started
      nats:
        condition: service_started
    environment:
      - POSTS_DB_USER
      - POSTS_DB_PASS
      - POSTS_DB_NAME
      - POSTS_DB_HOST
      - POSTS_DB_PORT
      - POSTS_NATS_HOST
      - POSTS_NATS_PORT
      - POSTS_USERS_GRPC_HOST
      - POSTS_USERS_GRPC_PORT
      - POSTS_NATS_SUBSCRIPTION_NAME
      - POSTS_NATS_DEADLETTER_NAME
      - POSTS_HTTP_PORT
    expose:
      - "${POSTS_HTTP_PORT}"
    networks:
      - internal

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    depends_on:
      users:
        condition: service_started
      posts:
        condition: service_started
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    networks:
       - nginx_network
       - internal
    environment:
      - POST_SERVER_USER
      - POST_SERVER_PASSWORD
      - POST_SERVER_SUBJECT
      - POST_SERVER_HOST
      - POST_SERVER_PORT
      - USER_SERVICE_ADDRESS
      - TOKEN_TTL
      - TOKEN_SALT
      - POST_REST_API_URL
      - GATEWAY_PORT

volumes:
  pgdata_posts:
  pgdata_users:

networks:
  nginx_network:
    external: true
  internal:
